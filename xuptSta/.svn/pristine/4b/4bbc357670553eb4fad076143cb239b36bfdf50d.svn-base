package com.xuptSta.action;

import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.ActionSupport;
import com.xuptSta.entity.Dynamic;
import com.xuptSta.entity.DynamicType;
import com.xuptSta.entity.Member;
import com.xuptSta.entity.PageBean;
import com.xuptSta.service.DynamicService;
import com.xuptSta.util.PageUtil;
import com.xuptSta.util.ResponseUtil;
import com.xuptSta.util.StringUtil;
@Controller
public class DynamicAction extends ActionSupport implements ServletRequestAware{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private HttpServletRequest request;
	@Resource
	private DynamicService dynamicService;
	private String page;
	private String rows;
	private String ids;
	private Dynamic dynamic;
	private Dynamic s_dynamic;
	private List<Dynamic> dynamicList;
	private String mainPage;
	private Long total;
	private String pageCode;
	private int dynamicId;
	private String editorValue;
	private String imageName;

	public String getImageName() {
		return imageName;
	}

	public void setImageName(String imageName) {
		this.imageName = imageName;
	}

	public String getEditorValue() {
		return editorValue;
	}

	public void setEditorValue(String editorValue) {
		this.editorValue = editorValue;
	}

	public int getDynamicId() {
		return dynamicId;
	}

	public void setDynamicId(int dynamicId) {
		this.dynamicId = dynamicId;
	}

	public HttpServletRequest getRequest() {
		return request;
	}

	public void setRequest(HttpServletRequest request) {
		this.request = request;
	}

	public String getPageCode() {
		return pageCode;
	}

	public void setPageCode(String pageCode) {
		this.pageCode = pageCode;
	}

	public Long getTotal() {
		return total;
	}

	public void setTotal(Long total) {
		this.total = total;
	}

	public String getPage() {
		return page;
	}

	public void setPage(String page) {
		this.page = page;
	}

	public String getRows() {
		return rows;
	}

	public void setRows(String rows) {
		this.rows = rows;
	}

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public Dynamic getDynamic() {
		return dynamic;
	}

	public void setDynamic(Dynamic dynamic) {
		this.dynamic = dynamic;
	}

	public Dynamic getS_dynamic() {
		return s_dynamic;
	}

	public void setS_dynamic(Dynamic s_dynamic) {
		this.s_dynamic = s_dynamic;
	}

	public List<Dynamic> getDynamicList() {
		return dynamicList;
	}

	public void setDynamicList(List<Dynamic> dynamicList) {
		this.dynamicList = dynamicList;
	}

	public String getMainPage() {
		return mainPage;
	}

	public void setMainPage(String mainPage) {
		this.mainPage = mainPage;
	}
	
	public String head()throws Exception{
		if(StringUtil.isEmpty(page)){
			page="1";
		}
		PageBean pageBean=new PageBean(Integer.parseInt(page),5);
		dynamicList=dynamicService.findDynamicList(s_dynamic, pageBean);
		total=dynamicService.getDynamicCount(s_dynamic);
		mainPage="dynamic/dynamicList.jsp";
		
		//分页
		StringBuffer param=new StringBuffer();
		if(s_dynamic!=null){
			if(StringUtil.isNotEmpty(s_dynamic.getTitle())){
				param.append("s_dynamic.title="+s_dynamic.getTitle());
			}
			if(s_dynamic.getDynamicType()!=null){
				param.append("s_dynamic.dynamicType.id="+s_dynamic.getDynamicType().getId());
			}
		}
		pageCode=PageUtil.genPagination(request.getContextPath()+"/dynamic_head.action", total, Integer.parseInt(page), 5, param.toString());
		return "head";
	}

	
	public String dynamicDetail()throws Exception{
		dynamic=dynamicService.getDynamicById(dynamicId);
		mainPage="dynamic/dynamicDetail.jsp";
		return "head";
	}
	
	public String list()throws Exception{
		PageBean pageBean=new PageBean(Integer.parseInt(page),Integer.parseInt(rows));
		List<Dynamic> dynamicList=dynamicService.findDynamicList(s_dynamic, pageBean);
		total=dynamicService.getDynamicCount(s_dynamic);
		JsonConfig jsonConfig=new JsonConfig();
		jsonConfig.registerJsonValueProcessor(java.util.Date.class, new DateJsonValueProcessor("yyyy-MM-dd"));
		jsonConfig.registerJsonValueProcessor(DynamicType.class, new ObjectJsonValueProcessor(new String[]{"id","typeName"},DynamicType.class));
		JSONArray jsonArray=JSONArray.fromObject(dynamicList, jsonConfig);
		JSONObject result=new JSONObject();
		result.put("total", total);
		result.put("rows", jsonArray);
		ResponseUtil.write(ServletActionContext.getResponse(), result);
		return null;
	}
	
	public String save()throws Exception{
		String str=editorValue;
		str=str.replaceAll("<a href[^>]*>", "");
		str=str.replaceAll("</a>", ""); 
		str=str.replaceAll("<pre class[^>]*>", "");
		str=str.replaceAll("</pre>", ""); 
		str=str.replaceAll("<img[^>]*/>", "");
		if(str.length()<=200){
			dynamic.setSummary(str);
		}else{
			dynamic.setSummary(str.substring(0, 200));
		}
		dynamic.setContent(editorValue);
		dynamic.setPublishDate(new Date());
		dynamicService.saveDynamic(dynamic);
		JSONObject result=new JSONObject();
		result.put("success", true);
		ResponseUtil.write(ServletActionContext.getResponse(), result);
		return null;
	}
	
	public String delete()throws Exception{
		JSONObject result=new JSONObject();
		String[] idsStr=ids.split(",");
		for(int i=0;i<idsStr.length;i++){
			Dynamic dynamic=dynamicService.getDynamicById(Integer.parseInt(idsStr[i]));
			dynamicService.deleteDynamic(dynamic);
		}
		result.put("success", true);
		ResponseUtil.write(ServletActionContext.getResponse(), result);
		return null;
	}
	
	@Override
	public void setServletRequest(HttpServletRequest request) {
		this.request=request;
	}
}
