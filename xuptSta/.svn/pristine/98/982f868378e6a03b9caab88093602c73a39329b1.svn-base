package com.xuptSta.action;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.struts2.StrutsStatics;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionInvocation;
import com.opensymphony.xwork2.interceptor.Interceptor;

public class MyIntercept implements Interceptor
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private static List<String> ips = new ArrayList<String>();
	
	@Override
	public void destroy() {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void init() {
		// TODO Auto-generated method stub
		
	}

	@SuppressWarnings("unchecked")
	@Override
	public String intercept(ActionInvocation actionInvocation) throws Exception {
		// TODO Auto-generated method stub
		ActionContext actionContext = ActionContext.getContext();
		Map<String,Object> session = actionContext.getSession();
		HttpServletRequest request = (HttpServletRequest)actionInvocation.getInvocationContext().get(StrutsStatics.HTTP_REQUEST);
		String ip = request.getRemoteAddr();
		if(ips.indexOf(ip)!=-1)
		{
			return "Repeatedcommit";
		}
		Map<String,Integer> source;
		if(session.get("source")==null||session.get("source").equals(""))
		{
			source = new HashMap<String,Integer>();
		}
		else
		{
			source = (Map<String,Integer>)session.get("source");
		}
		if(source.get(ip)==null)
		{
			source.put(ip, 1);
		}
		else
		{
			source.put(ip, (source.get(ip)+1));
		}
		session.put("source", source);
		if(source.get(ip)>60)
		{
			ips.add(ip);
			return "Repeatedcommit";
		}
		else
		{
			return actionInvocation.invoke();
		}
	}

}
