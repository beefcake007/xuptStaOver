package com.xuptSta.action;

import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.ActionSupport;
import com.xuptSta.entity.Blog;
import com.xuptSta.entity.BlogType;
import com.xuptSta.entity.Blogger;
import com.xuptSta.entity.Comment;
import com.xuptSta.entity.PageBean;
import com.xuptSta.service.BlogService;
import com.xuptSta.service.BlogTypeService;
import com.xuptSta.service.CommentService;
import com.xuptSta.util.PageUtil;
import com.xuptSta.util.ResponseUtil;
import com.xuptSta.util.StringUtil;

@Controller
public class BlogAction extends ActionSupport implements ServletRequestAware{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private HttpServletRequest request;
	@Resource
	private BlogTypeService blogTypeService;
	@Resource
	private BlogService blogService;
	@Resource
	private CommentService commentService;
 	private String mainPage;
	private List<BlogType> blogTypeList;
	private List<Blog> blogList;
	private String page;
	private String rows;
	private Long total;
	private String pageCode;
	private Blog s_blog;
	private String editorValue;
	private Blog blog;
	private int blogId;
	private String ids;
	private Comment s_comment;
	private List<Comment> commentList;

	
	public Comment getS_comment() {
		return s_comment;
	}

	public void setS_comment(Comment s_comment) {
		this.s_comment = s_comment;
	}

	public List<Comment> getCommentList() {
		return commentList;
	}

	public void setCommentList(List<Comment> commentList) {
		this.commentList = commentList;
	}

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public List<BlogType> getBlogTypeList() {
		return blogTypeList;
	}

	public void setBlogTypeList(List<BlogType> blogTypeList) {
		this.blogTypeList = blogTypeList;
	}

	public List<Blog> getBlogList() {
		return blogList;
	}

	public void setBlogList(List<Blog> blogList) {
		this.blogList = blogList;
	}

	public String getPageCode() {
		return pageCode;
	}

	public void setPageCode(String pageCode) {
		this.pageCode = pageCode;
	}

	public int getBlogId() {
		return blogId;
	}

	public void setBlogId(int blogId) {
		this.blogId = blogId;
	}

	public Blog getBlog() {
		return blog;
	}

	public void setBlog(Blog blog) {
		this.blog = blog;
	}

	public String getEditorValue() {
		return editorValue;
	}

	public void setEditorValue(String editorValue) {
		this.editorValue = editorValue;
	}

	public String getMainPage() {
		return mainPage;
	}

	public void setMainPage(String mainPage) {
		this.mainPage = mainPage;
	}

	public String getPage() {
		return page;
	}

	public void setPage(String page) {
		this.page = page;
	}

	public String getRows() {
		return rows;
	}

	public void setRows(String rows) {
		this.rows = rows;
	}

	public Long getTotal() {
		return total;
	}

	public void setTotal(Long total) {
		this.total = total;
	}

	public Blog getS_blog() {
		return s_blog;
	}

	public void setS_blog(Blog s_blog) {
		this.s_blog = s_blog;
	}

	public String head()throws Exception{	
		if(StringUtil.isEmpty(page)){
			page="1";
		}
		PageBean pageBean = new PageBean(Integer.parseInt(page),5);
		mainPage="blog/blogList.jsp";
		blogTypeList=blogTypeService.findBlogType();
		blogList=blogService.findBlogList(s_blog, pageBean);
		total=blogService.getBlogCount(s_blog);
		
		//分页
		StringBuffer param=new StringBuffer();
		if(s_blog!=null){
			if(StringUtil.isNotEmpty(s_blog.getTitle())){
				param.append("s_blog.title="+s_blog.getTitle());
			}
			
			if(s_blog.getBlogger()!=null){
				param.append("s_blog.blogger.id="+s_blog.getBlogger().getId());
			}
			
			if(s_blog.getBlogType()!=null){
				param.append("s_blog.blogType.id="+s_blog.getBlogType().getId());
			}
		}
		pageCode=PageUtil.genPagination(request.getContextPath()+"/blog_head.action", total, Integer.parseInt(page), 5, param.toString());
		return "head";
	}
	
	public String write()throws Exception{
		mainPage="blog/blogWrite.jsp";
		blogTypeList=blogTypeService.findBlogType();
		request.setAttribute("blogTypeList", blogTypeList);
		return "write";
	}

	public String saveWrite()throws Exception{
		//过滤<pre>,<img>,<a>标签，并截取200长度
		String str=editorValue;
		str=str.replaceAll("<a href[^>]*>", "");
		str=str.replaceAll("</a>", ""); 
		str=str.replaceAll("<pre class[^>]*>", "");
		str=str.replaceAll("</pre>", ""); 
		str=str.replaceAll("<img[^>]*/>", "");
		if(str.trim().length()<=100){
			blog.setSummary(str.trim());
		}else{
			blog.setSummary(str.trim().substring(0, 100));
		}
		
		//获取editorValue的第一个img的src，如果没有默认
		String s=editorValue;
		Pattern p = Pattern.compile("<img[^>]+src\\s*=\\s*['\"]([^'\"]+)['\"][^>]*>");
		Matcher m=p.matcher(s);
		if(m.find()){
			blog.setBlogImage(m.group(1));
		}else{
			blog.setBlogImage("images/about.jpg");
		}
		blog.setContent(editorValue);
		blog.setReleaseDate(new Date());
		blogService.saveBlog(blog);
		mainPage="blog/blogList.jsp";
		return "index";
	}
	
	public String reLogin()throws Exception{
		mainPage="blog/blogLogin.jsp";
		return "head";
	}
	
	public String blogDetail()throws Exception{
		blog=blogService.getBlogById(blogId);
		blog.setClickHit(blog.getClickHit()+1);
		blogService.saveBlog(blog);
		
		commentList=commentService.findCommentList(s_comment, null);
		
		mainPage="blog/blogDetail.jsp";
		return "write";
	}
	
	public String blogHoney()throws Exception{
		blog=blogService.getBlogById(blogId);
		blog.setHoney(blog.getHoney()+1);
		blogService.saveBlog(blog);
		JSONObject result=new JSONObject();
		result.put("success", true);
		ResponseUtil.write(ServletActionContext.getResponse(), result);
		return null;
	}
	
	public String blogDetailBG()throws Exception{
		blog=blogService.getBlogById(blogId);
		return "helloBG";
	}
	
	public String list()throws Exception{
		PageBean pageBean = new PageBean(Integer.parseInt(page),Integer.parseInt(rows));
		List<Blog> blogList=blogService.findBlogList(s_blog, pageBean);
		total=blogService.getBlogCount(s_blog);
		JsonConfig jsonConfig=new JsonConfig();
		jsonConfig.setExcludes(new String[]{"commentList"});
		jsonConfig.registerJsonValueProcessor(java.util.Date.class, new DateJsonValueProcessor("yyyy-MM-dd"));
		jsonConfig.registerJsonValueProcessor(BlogType.class, new ObjectJsonValueProcessor(new String[]{"id","typeName"}, BlogType.class));
		jsonConfig.registerJsonValueProcessor(Blogger.class, new ObjectJsonValueProcessor(new String[]{"id","nickName"}, Blogger.class));
		JSONArray jsonArray=JSONArray.fromObject(blogList, jsonConfig);
		JSONObject result=new JSONObject();
		result.put("total", total);
		result.put("rows", jsonArray);
		ResponseUtil.write(ServletActionContext.getResponse(), result);
		return null;
	}
	
	public String delete()throws Exception{
		JSONObject result=new JSONObject();
		String[] idsStr=ids.split(",");
		for(int i=0;i<idsStr.length;i++){
			if(commentService.existCommentWithBlogId(Integer.parseInt(idsStr[i]))){
				result.put("exist", "博客下有评论不能删除");
			}else{
				Blog blog=blogService.getBlogById(Integer.parseInt(idsStr[i]));
				blogService.deleteBlog(blog);
			}
		}
		result.put("success", true);
		ResponseUtil.write(ServletActionContext.getResponse(), result);
		return null;
	}
	
	@Override
	public void setServletRequest(HttpServletRequest request) {
		this.request=request;
	}
}
