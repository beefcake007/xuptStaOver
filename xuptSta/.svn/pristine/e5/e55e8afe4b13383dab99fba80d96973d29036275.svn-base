package com.xuptSta.action;

import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import net.sf.json.JsonConfig;

import org.apache.struts2.ServletActionContext;
import org.apache.struts2.interceptor.ServletRequestAware;
import org.springframework.stereotype.Controller;

import com.opensymphony.xwork2.ActionSupport;
import com.xuptSta.entity.Blog;
import com.xuptSta.entity.Blogger;
import com.xuptSta.entity.Member;
import com.xuptSta.entity.PageBean;
import com.xuptSta.service.BlogService;
import com.xuptSta.service.BloggerService;
import com.xuptSta.service.MemberService;
import com.xuptSta.util.PageUtil;
import com.xuptSta.util.ResponseUtil;
import com.xuptSta.util.StringUtil;
@Controller
public class BloggerAction extends ActionSupport implements ServletRequestAware{

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Resource
	private BloggerService bloggerService;
	@Resource
	private BlogService blogService;
	@Resource
	private MemberService memberService;
	
	private HttpServletRequest request;
	private String userName;
	private String password;
	private String imageCode;
	private Blogger blogger;
	private Blogger s_blogger;
	private String error;
	private String imageName;
	private String mainPage;
	private int bloggerId;
	private String page;
	private Blog s_blog;
	private Long total;
	private String pageCode;
	private List<Blog> blogList;
	private String ids;
	private String rows;
	private Member member;
	
	public Member getMember() {
		return member;
	}

	public void setMember(Member member) {
		this.member = member;
	}

	public String getRows() {
		return rows;
	}

	public void setRows(String rows) {
		this.rows = rows;
	}

	public String getIds() {
		return ids;
	}

	public void setIds(String ids) {
		this.ids = ids;
	}

	public Blogger getS_blogger() {
		return s_blogger;
	}

	public void setS_blogger(Blogger s_blogger) {
		this.s_blogger = s_blogger;
	}

	public List<Blog> getBlogList() {
		return blogList;
	}

	public void setBlogList(List<Blog> blogList) {
		this.blogList = blogList;
	}

	public String getPageCode() {
		return pageCode;
	}

	public void setPageCode(String pageCode) {
		this.pageCode = pageCode;
	}

	public Long getTotal() {
		return total;
	}

	public void setTotal(Long total) {
		this.total = total;
	}

	public String getPage() {
		return page;
	}

	public void setPage(String page) {
		this.page = page;
	}

	public Blog getS_blog() {
		return s_blog;
	}

	public void setS_blog(Blog s_blog) {
		this.s_blog = s_blog;
	}

	public int getBloggerId() {
		return bloggerId;
	}

	public void setBloggerId(int bloggerId) {
		this.bloggerId = bloggerId;
	}

	public String getMainPage() {
		return mainPage;
	}

	public void setMainPage(String mainPage) {
		this.mainPage = mainPage;
	}

	public String getImageName() {
		return imageName;
	}

	public void setImageName(String imageName) {
		this.imageName = imageName;
	}

	public String getError() {
		return error;
	}

	public void setError(String error) {
		this.error = error;
	}

	public Blogger getBlogger() {
		return blogger;
	}

	public void setBlogger(Blogger blogger) {
		this.blogger = blogger;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getImageCode() {
		return imageCode;
	}

	public void setImageCode(String imageCode) {
		this.imageCode = imageCode;
	}

	
	public String login()throws Exception{
		HttpSession session=request.getSession();
		Blogger currentBlogger=bloggerService.login(blogger);
		if(!imageCode.equals(session.getAttribute("sRand"))){
			error="验证码错误";
			return "error";
		}else if(currentBlogger==null){
			error="用户名或密码错误";
			return "error";
		}else{
			session.setAttribute("currentBlogger", currentBlogger);
		}
		return "login";
	}
	
	public String logout()throws Exception{
		request.getSession().invalidate();
		return "logout";
	}
	
	public String setting()throws Exception{
		mainPage="blog/blogSetting.jsp";
		return "write";
	}
	
	public String save()throws Exception{
		bloggerService.saveBlogger(blogger);
		mainPage="blog/blogList.jsp";
		return "login";
	}
	
	
	public String myself()throws Exception{
		if(StringUtil.isEmpty(page)){
			page="1";
		}
		PageBean pageBean = new PageBean(Integer.parseInt(page),5);
		blogger=bloggerService.getBloggerById(bloggerId);
		blogList=blogService.findBlogList(s_blog, pageBean);
		total=blogService.getBlogCount(s_blog);
		mainPage="blog/blogPerson.jsp";
		
		//分页
		StringBuffer param=new StringBuffer();
		if(s_blog!=null){
			if(StringUtil.isNotEmpty(s_blog.getTitle())){
				param.append("s_blog.title="+s_blog.getTitle());
			}
			
			if(s_blog.getBlogger()!=null){
				param.append("s_blog.blogger.id="+s_blog.getBlogger().getId());
			}
			
			if(s_blog.getBlogType()!=null){
				param.append("s_blog.blogType.id="+s_blog.getBlogType().getId());
			}
		}
		pageCode=PageUtil.genPagination(request.getContextPath()+"/blogger_myself.action", total, Integer.parseInt(page), 5, param.toString());
		return "write";
	}
	
	
	public String list()throws Exception{
		PageBean pageBean=new PageBean(Integer.parseInt(page),Integer.parseInt(rows));
		List<Blogger> bloggerList=bloggerService.findBloggerList(s_blogger, pageBean);
		total=bloggerService.getBloggerCount(s_blogger);
		JsonConfig jsonConfig=new JsonConfig();
		jsonConfig.setExcludes(new String[]{"blogList","commentList"});
		JSONArray jsonArray=JSONArray.fromObject(bloggerList, jsonConfig);
		JSONObject result=new JSONObject();
		result.put("rows", jsonArray);
		result.put("total", total);
		ResponseUtil.write(ServletActionContext.getResponse(), result);
		return null;
	}
	
	public String saveBG()throws Exception{
		int memberId=member.getId();
		Member member2=memberService.getMemberById(memberId);
		blogger.setImageName("/images/member/"+member2.getImageName());
		blogger.setUserName(member2.getTitle());
		bloggerService.saveBlogger(blogger);
		JSONObject result=new JSONObject();
		result.put("success", true);
		ResponseUtil.write(ServletActionContext.getResponse(), result);
		return null;
	}
	
	public String delete()throws Exception{
		JSONObject result=new JSONObject();
		String[] idsStr=ids.split(",");
		for(int i=0;i<idsStr.length;i++){
			Blogger blogger=bloggerService.getBloggerById(Integer.parseInt(idsStr[i]));
			bloggerService.deleteBlogger(blogger);
		}
		result.put("success", true);
		ResponseUtil.write(ServletActionContext.getResponse(), result);
		return null;
	}
	
	@Override
	public void setServletRequest(HttpServletRequest request) {
		this.request=request;
	}

}
